{"version":3,"sources":["../src/index-test.js"],"names":["http","require","express","cors","morgan","bodyParser","webSocketServer","Server","PORT","app","server","createServer","use","exposedHeaders","json","limit","wss","clients","on","connection","console","log","userId","length","newClient","ws","push","message","send","filter","client","get","req","res","next","prople","setInterval","forEach","msg","listen","process","env","address","port"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,aAAaJ,QAAQ,aAAR,CAAnB;AACA,IAAMK,kBAAkBL,QAAQ,KAAR,EAAeM,MAAvC;;AAEA,IAAMC,OAAO,IAAb;AACA,IAAMC,MAAMP,SAAZ;AACAO,IAAIC,MAAJ,GAAaV,KAAKW,YAAL,CAAkBF,GAAlB,CAAb;;AAEAA,IAAIG,GAAJ,CAAQR,OAAO,KAAP,CAAR;;AAEAK,IAAIG,GAAJ,CAAQT,KAAK;AACTU,oBAAgB;AADP,CAAL,CAAR;;AAIAJ,IAAIG,GAAJ,CAAQP,WAAWS,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAKAN,IAAIO,GAAJ,GAAU,IAAIV,eAAJ,CAAoB;AAC1BI,YAAQD,IAAIC;AADc,CAApB,CAAV;;AAIA,IAAIO,UAAU,EAAd;;AAEAR,IAAIO,GAAJ,CAAQE,EAAR,CAAW,YAAX,EAAyB,UAACC,UAAD,EAAgB;AACrCC,YAAQC,GAAR,CAAY,sBAAZ;;AAEA,QAAMC,SAASL,QAAQM,MAAvB;AACA,QAAMC,YAAY;AACdC,YAAIN,UADU;AAEdG;AAFc,KAAlB;AAIAL,YAAQS,IAAR,CAAaF,SAAb;AACAJ,YAAQC,GAAR,CAAY,YAAYC,MAAxB;AACI;AACJH,eAAWD,EAAX,CAAc,SAAd,EAAyB,UAACS,OAAD,EAAa;AAClCP,gBAAQC,GAAR,kCAA2CM,OAA3C;AACA;AACAR,mBAAWS,IAAX,CAAgB,WAAhB;AACH,KAJD;AAKAT,eAAWD,EAAX,CAAc,OAAd,EAAuB,YAAM;AACzBE,gBAAQC,GAAR,aAAsBC,MAAtB;AACAL,kBAAUA,QAAQY,MAAR,CAAe,UAACC,MAAD;AAAA,mBAAYA,OAAOR,MAAP,KAAkBA,MAA9B;AAAA,SAAf,CAAV;AACH,KAHD;AAIH,CApBD;;AAsBAb,IAAIsB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAInB,IAAJ,CAAS,EAAT;AAGH,CAJD;;AAMAL,IAAIsB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChD,WAAOD,IAAInB,IAAJ,CAAS;AACZqB,gBAAQlB;AADI,KAAT,CAAP;AAGH,CAJD;;AAMAmB,YAAY,YAAM;AACd;AACAhB,YAAQC,GAAR,CAAeJ,QAAQM,MAAvB;AACA,QAAIN,QAAQM,MAAR,GAAiB,CAArB,EAAwB;AACpBN,gBAAQoB,OAAR,CAAgB,UAACP,MAAD,EAAY;AACxBV,oBAAQC,GAAR,CAAY,WAAZ,EAAyBS,OAAOR,MAAhC;AACA,gBAAMgB,MAASR,OAAOR,MAAhB,uCAAN;AACAQ,mBAAOL,EAAP,CAAUG,IAAV,CAAeU,GAAf;AACH,SAJD;AAKH;AACJ,CAVD,EAUG,IAVH;;AAcA7B,IAAIC,MAAJ,CAAW6B,MAAX,CAAkBC,QAAQC,GAAR,CAAYjC,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC9CY,YAAQC,GAAR,6BAAsCZ,IAAIC,MAAJ,CAAWgC,OAAX,GAAqBC,IAA3D;AACH,CAFD","file":"index-test.js","sourcesContent":["const http = require('http');\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst morgan = require('morgan');\r\nconst bodyParser = require('body-parser');\r\nconst webSocketServer = require('uws').Server;\r\n\r\nconst PORT = 3000;\r\nconst app = express();\r\napp.server = http.createServer(app);\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(cors({\r\n    exposedHeaders: '*'\r\n}))\r\n\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}))\r\n\r\n\r\napp.wss = new webSocketServer({\r\n    server: app.server\r\n})\r\n\r\nlet clients = [];\r\n\r\napp.wss.on('connection', (connection) => {\r\n    console.log('new client connected');\r\n\r\n    const userId = clients.length;\r\n    const newClient = {\r\n        ws: connection,\r\n        userId\r\n    };\r\n    clients.push(newClient);\r\n    console.log('userId:' + userId)\r\n        //listen event new message from client\r\n    connection.on('message', (message) => {\r\n        console.log(`Got new message from client ${message}`);\r\n        //after getting new message from client, we send back to the client with the new message\r\n        connection.send('hi client');\r\n    })\r\n    connection.on('close', () => {\r\n        console.log(`Client ${userId} disconnected`);\r\n        clients = clients.filter((client) => client.userId !== userId)\r\n    })\r\n})\r\n\r\napp.get('/', (req, res) => {\r\n    res.json({\r\n\r\n    })\r\n})\r\n\r\napp.get('/api/all_connections', (req, res, next) => {\r\n    return res.json({\r\n        prople: clients\r\n    });\r\n});\r\n\r\nsetInterval(() => {\r\n    //each 3 seconds this function be excuted\r\n    console.log(`${clients.length} in connection`)\r\n    if (clients.length > 0) {\r\n        clients.forEach((client) => {\r\n            console.log('client ID', client.userId)\r\n            const msg = `${client.userId}:you got a new message from server`\r\n            client.ws.send(msg)\r\n        });\r\n    }\r\n}, 3000)\r\n\r\n\r\n\r\napp.server.listen(process.env.PORT || PORT, () => {\r\n    console.log(`App is running on port ${app.server.address().port}`);\r\n})"]}