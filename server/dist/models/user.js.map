{"version":3,"sources":["../../src/models/user.js"],"names":["isEmail","require","_","User","app","user","cb","errors","fields","validations","name","errorMessage","do","get","length","email","password","forEach","field","fieldValidation","isValid","errMsg","push","err","join","db","console","log","Promise","resolve","reject","beforeSave","collection","insertOne","info","message","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["const isEmail = require('../helpers').isEmail;\r\nconst _ = require('lodash');\r\nclass User {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    beforeSave(user, cb = () => {}) {\r\n        //first is validate user object beforc save to user connection\r\n        let errors = [];\r\n\r\n        const fields = ['name', 'email', 'password']\r\n        const validations = {\r\n            name: {\r\n                errorMessage: 'Name is require.',\r\n                do: () => {\r\n                    const name = _.get(user, 'name', '');\r\n                    return name.length;\r\n                }\r\n            },\r\n            email: {\r\n                errorMessage: 'Email is require.',\r\n                do: () => {\r\n                    const email = _.get(user, 'email', '')\r\n                    if (!email.length || !isEmail(email)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            password: {\r\n                errorMessage: 'Password is required and more than 3 charecter.',\r\n                do: () => {\r\n                    const password = _.get(user, 'password', '')\r\n                    if (!password.length || password.length < 6) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n        //loop all fields to check if valid or not \r\n        fields.forEach((field) => {\r\n            const fieldValidation = _.get(validations, field);\r\n            if (fieldValidation) {\r\n                // check\r\n                const isValid = fieldValidation.do();\r\n                const errMsg = fieldValidation.errorMessage;\r\n\r\n                if (!isValid) {\r\n                    errors.push(errMsg);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (errors.length) {\r\n            //this is not pass of the validation\r\n            const err = _.join(errors, ',');\r\n            return cb(err, null);\r\n        }\r\n        return cb(null, user);\r\n    }\r\n    create(user) {\r\n        const db = this.app.db\r\n        console.log(\"User\", user)\r\n        return new Promise((resolve, reject) => {\r\n            this.beforeSave(user, (err, user) => {\r\n\r\n                console.log('after validation:', err, user)\r\n\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                // insert new user object to users collections \r\n                db.collection('users').insertOne(user, (err, info) => {\r\n                    //check if error return error to user\r\n                    if (err) {\r\n                        return reject({ message: 'An error saving user' });\r\n                    }\r\n                    //otherwise return user object to user\r\n                    return resolve(user);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = User;"]}